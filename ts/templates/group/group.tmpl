[!unix] skip 'this procedure can only work on Unix systems'
env HOME={{.Home}}
env TMPDIR={{.TmpDir}}
env sb_dir=$HOME/sandboxes/group_msb_{{.DbPathVer}}

[!minimum_version_for_group:{{.DbVersion}}:{{.DbFlavor}}] skip 'minimum version for group replication not met'
! exists $sb_dir

# deployment

exec dbdeployer deploy replication --topology=group --concurrent {{.DbVersion}}
exists $sb_dir
exists $sb_dir/node3
cleanup_at_end $sb_dir
stdout 'Group Replication directory installed in .*/sandboxes/group_msb_{{.DbPathVer}}'
stdout 'initialize_nodes'
stdout -count=5 '# Node 1'
stdout -count=3 '# Node 2'
stdout -count=3 '# Node 3'
stdout -count=3 '[0-9]{8}-1111-1111-1111-111111111111'
stdout -count=3 '[0-9]{8}-2222-2222-2222-222222222222'
stdout -count=3 '[0-9]{8}-3333-3333-3333-333333333333'
! stderr .

exists $sb_dir
[!exists_within_seconds:$sb_dir/node3/data/msandbox.err:2] stop 'the database log for node 3 was not found within 2 seconds'

# check ports and files

exec $sb_dir/check_nodes
stdout -count=9 'ONLINE'
[version_is_at_least:{{.DbVersion}}:8.0.0] stdout -count=9 'PRIMARY'
! stderr .

check_sandbox_manifest $sb_dir group

env required_ports=6
[version_is_at_least:$db_version:8.0.0] env required_ports=9
check_ports $sb_dir $required_ports

# test replication

exec $HOME/sandboxes/group_msb_{{.DbPathVer}}/test_replication
stdout '# fail: 0'
! stderr .

! find_errors $sb_dir/node1
! find_errors $sb_dir/node2
! find_errors $sb_dir/node3

# test use_* commands

exec $sb_dir/use_all 'select @@server_id'
stdout -count=3 '^[0-9]+$'
exec $sb_dir/use_all_masters 'select @@server_id'
stdout -count=3 '^[0-9]+$'
exec $sb_dir/use_all_slaves 'select @@server_id'
stdout -count=3 '^[0-9]+$'

# test dbdeployer sandboxes

exec dbdeployer sandboxes
stdout 'group_msb_{{.DbPathVer}}.*group-multi-primary'
! stderr .

# load data world

exec dbdeployer data-load get world group_msb_{{.DbPathVer}}
stdout 'downloading https://.*/world-db.tar.gz'
stdout 'Unpacking .*/sandboxes/group_msb_{{.DbPathVer}}/world-db.tar.gz'
stdout 'Running .*/sandboxes/group_msb_{{.DbPathVer}}/load_db.sh'

# load data worldx

exec dbdeployer data-load get worldx group_msb_{{.DbPathVer}}
stdout 'downloading https://.*/world_x-db.tar.gz'
stdout 'Unpacking .*/sandboxes/group_msb_{{.DbPathVer}}/world_x-db.tar.gz'
stdout 'Running .*/sandboxes/group_msb_{{.DbPathVer}}/load_db.sh'

# load data sakila

exec dbdeployer data-load get sakila group_msb_{{.DbPathVer}}
stdout 'downloading https://.*/sakila-db.tar.gz'
stdout 'Unpacking .*/sandboxes/group_msb_{{.DbPathVer}}/sakila-db.tar.gz'
stdout 'Running .*/sandboxes/group_msb_{{.DbPathVer}}/load_db.sh'

# load data check schemas

exec $sb_dir/n1 -e 'show schemas'
stdout 'world\b'
stdout 'world_x'
stdout 'sakila'

exec $sb_dir/n2 -e 'show schemas'
stdout 'world\b'
stdout 'world_x'
stdout 'sakila'

# load data check tables

exec $sb_dir/n1 -e 'show tables from world'
stdout 'city'
stdout 'country'
stdout 'countrylanguage'

exec $sb_dir/n2 -e 'show tables from world'
stdout 'city'
stdout 'country'
stdout 'countrylanguage'

exec $sb_dir/n1 -e 'show tables from world_x'
stdout 'city'
stdout 'country'
stdout 'countryinfo'
stdout 'countrylanguage'

exec $sb_dir/n2 -e 'show tables from world_x'
stdout 'city'
stdout 'country'
stdout 'countryinfo'
stdout 'countrylanguage'

exec $sb_dir/n1 -e 'show tables from sakila'
stdout 'actor'
stdout 'actor_info'
stdout 'address'
stdout 'category'
stdout 'city'

exec $sb_dir/n2 -e 'show tables from sakila'
stdout 'actor'
stdout 'actor_info'
stdout 'address'
stdout 'category'
stdout 'city'

# sandbox cleanup
exec dbdeployer delete group_msb_{{.DbPathVer}}
stdout 'sandboxes/group_msb_{{.DbPathVer}}'
! stderr .