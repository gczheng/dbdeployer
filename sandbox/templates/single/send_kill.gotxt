#!{{.ShellPath}}
{{.Copyright}}
# Generated by dbdeployer {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
source {{.SandboxDir}}/sb_include

kill_mode=$1

TIMEOUT=30

mysqld_safe_pid=$(ps auxw | grep mysqld_safe | grep "defaults-file=$SBDIR" | awk '{print $2}')
if [ -n "$(is_running)" ]
then
    MYPID=$(cat $PIDFILE)
    kill -9 $mysqld_safe_pid

    # Using one of the arguments 'crash', '-9', or 'destroy'
    # this script will terminate the database in a "pull-the-plug" fashion
    if [ "$kill_mode" == "crash" -o "$kill_mode" == "-9"  -o "$kill_mode" == "destroy" ]
    then
        echo "Terminating the server immediately --- kill -9 $MYPID"
        kill -9 $MYPID
        rm -f $PIDFILE
        rm -f $SOCKET_FILE
        for socket_file in $SOCKET_FILE $MYSQLX_SOCKET_FILE
        do
          if [ -e ${socket_file} ]
          then
            rm -f ${socket_file}
          fi
          if [ -e ${socket_file}.lock ]
          then
            rm -f ${socket_file}.lock
          fi
        done
    else
        echo "Attempting normal termination --- kill -15 $MYPID"
        kill -15 $MYPID
    fi

    # give it a chance to exit peacefully
    ATTEMPTS=1
    while [ -f $PIDFILE ]
    do
        ATTEMPTS=$(( $ATTEMPTS + 1 ))
        if [ $ATTEMPTS = $TIMEOUT ]
        then
            break
        fi
        sleep $SLEEP_TIME
    done
    if [ -f $PIDFILE ]
    then
        echo "SERVER UNRESPONSIVE --- kill -9 $MYPID"
        kill -9 $MYPID
        rm -f $PIDFILE
    fi
else
    # server not running - removing stale pid-file
    if [ -f $PIDFILE ]
    then
        rm -f $PIDFILE
    fi
fi
